plugins {
    id "java"
    id "io.quarkus"
    id "jacoco"
    id "com.avast.gradle.docker-compose" version "0.14.0"
}

ext {
    mockitoVersion = "3.8.0"
    vertxVersion = "4.0.2"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("io.quarkus:quarkus-universe-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-vertx"
    implementation "io.quarkus:quarkus-vertx-web"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-arc"

    // RxJava2 Verx - Quarkus Integration
    implementation "io.vertx:vertx-rx-java2:$vertxVersion"
    implementation "io.smallrye.reactive:mutiny-rxjava:0.14.0"

    // Postgres Reactive Client
    implementation "io.quarkus:quarkus-reactive-pg-client"

    // Flyway Postgres (JDBC)
    implementation "io.quarkus:quarkus-flyway"
    implementation "io.quarkus:quarkus-jdbc-postgresql"

    implementation "org.apache.commons:commons-lang3:3.11"

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured:4.3.3"
    testImplementation "io.quarkus:quarkus-junit5-mockito"

}

group "com.masmovil"
version "1.0.0-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
}

compileTestJava {
    options.encoding = "UTF-8"
}

dockerCompose.isRequiredBy(test)

dockerCompose {
    useComposeFiles = ['docker-compose.yml'] // like 'docker-compose -f <file>'
    captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
    stopContainers = true // doesn't call `docker-compose down` - useful for debugging
    removeContainers = true
    removeOrphans = true
    upAdditionalArgs = ['--force-recreate']
}

tasks.withType(Test) {

    reports.html.destination = file("${reporting.baseDir}/${name}")

    testLogging {
        // set options for log level LIFECYCLE
        events "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "short"
        showCauses true
        showStackTraces true

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}